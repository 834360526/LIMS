//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2300
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace LIMS.Message {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsMessage : DataSet {
        
        private 收件箱DataTable table收件箱;
        
        public dsMessage() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsMessage(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["收件箱"] != null)) {
                    this.Tables.Add(new 收件箱DataTable(ds.Tables["收件箱"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 收件箱DataTable 收件箱 {
            get {
                return this.table收件箱;
            }
        }
        
        public override DataSet Clone() {
            dsMessage cln = ((dsMessage)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["收件箱"] != null)) {
                this.Tables.Add(new 收件箱DataTable(ds.Tables["收件箱"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.table收件箱 = ((收件箱DataTable)(this.Tables["收件箱"]));
            if ((this.table收件箱 != null)) {
                this.table收件箱.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsMessage";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsMessage.xsd";
            this.Locale = new System.Globalization.CultureInfo("zh-CN");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.table收件箱 = new 收件箱DataTable();
            this.Tables.Add(this.table收件箱);
        }
        
        private bool ShouldSerialize收件箱() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void 收件箱RowChangeEventHandler(object sender, 收件箱RowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 收件箱DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn column标题;
            
            private DataColumn column日期;
            
            private DataColumn column发件人;
            
            private DataColumn column已阅;
            
            private DataColumn column收件人ID;
            
            internal 收件箱DataTable() : 
                    base("收件箱") {
                this.InitClass();
            }
            
            internal 收件箱DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn 标题Column {
                get {
                    return this.column标题;
                }
            }
            
            internal DataColumn 日期Column {
                get {
                    return this.column日期;
                }
            }
            
            internal DataColumn 发件人Column {
                get {
                    return this.column发件人;
                }
            }
            
            internal DataColumn 已阅Column {
                get {
                    return this.column已阅;
                }
            }
            
            internal DataColumn 收件人IDColumn {
                get {
                    return this.column收件人ID;
                }
            }
            
            public 收件箱Row this[int index] {
                get {
                    return ((收件箱Row)(this.Rows[index]));
                }
            }
            
            public event 收件箱RowChangeEventHandler 收件箱RowChanged;
            
            public event 收件箱RowChangeEventHandler 收件箱RowChanging;
            
            public event 收件箱RowChangeEventHandler 收件箱RowDeleted;
            
            public event 收件箱RowChangeEventHandler 收件箱RowDeleting;
            
            public void Add收件箱Row(收件箱Row row) {
                this.Rows.Add(row);
            }
            
            public 收件箱Row Add收件箱Row(string 标题, System.DateTime 日期, string 发件人, bool 已阅, int 收件人ID) {
                收件箱Row row收件箱Row = ((收件箱Row)(this.NewRow()));
                row收件箱Row.ItemArray = new object[] {
                        null,
                        标题,
                        日期,
                        发件人,
                        已阅,
                        收件人ID};
                this.Rows.Add(row收件箱Row);
                return row收件箱Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                收件箱DataTable cln = ((收件箱DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 收件箱DataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.column标题 = this.Columns["标题"];
                this.column日期 = this.Columns["日期"];
                this.column发件人 = this.Columns["发件人"];
                this.column已阅 = this.Columns["已阅"];
                this.column收件人ID = this.Columns["收件人ID"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.column标题 = new DataColumn("标题", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column标题);
                this.column日期 = new DataColumn("日期", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column日期);
                this.column发件人 = new DataColumn("发件人", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column发件人);
                this.column已阅 = new DataColumn("已阅", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column已阅);
                this.column收件人ID = new DataColumn("收件人ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column收件人ID);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.column发件人.AllowDBNull = false;
            }
            
            public 收件箱Row New收件箱Row() {
                return ((收件箱Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 收件箱Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(收件箱Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.收件箱RowChanged != null)) {
                    this.收件箱RowChanged(this, new 收件箱RowChangeEvent(((收件箱Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.收件箱RowChanging != null)) {
                    this.收件箱RowChanging(this, new 收件箱RowChangeEvent(((收件箱Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.收件箱RowDeleted != null)) {
                    this.收件箱RowDeleted(this, new 收件箱RowChangeEvent(((收件箱Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.收件箱RowDeleting != null)) {
                    this.收件箱RowDeleting(this, new 收件箱RowChangeEvent(((收件箱Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove收件箱Row(收件箱Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 收件箱Row : DataRow {
            
            private 收件箱DataTable table收件箱;
            
            internal 收件箱Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table收件箱 = ((收件箱DataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.table收件箱.IDColumn]));
                }
                set {
                    this[this.table收件箱.IDColumn] = value;
                }
            }
            
            public string 标题 {
                get {
                    try {
                        return ((string)(this[this.table收件箱.标题Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table收件箱.标题Column] = value;
                }
            }
            
            public System.DateTime 日期 {
                get {
                    try {
                        return ((System.DateTime)(this[this.table收件箱.日期Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table收件箱.日期Column] = value;
                }
            }
            
            public string 发件人 {
                get {
                    return ((string)(this[this.table收件箱.发件人Column]));
                }
                set {
                    this[this.table收件箱.发件人Column] = value;
                }
            }
            
            public bool 已阅 {
                get {
                    try {
                        return ((bool)(this[this.table收件箱.已阅Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table收件箱.已阅Column] = value;
                }
            }
            
            public int 收件人ID {
                get {
                    try {
                        return ((int)(this[this.table收件箱.收件人IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table收件箱.收件人IDColumn] = value;
                }
            }
            
            public bool Is标题Null() {
                return this.IsNull(this.table收件箱.标题Column);
            }
            
            public void Set标题Null() {
                this[this.table收件箱.标题Column] = System.Convert.DBNull;
            }
            
            public bool Is日期Null() {
                return this.IsNull(this.table收件箱.日期Column);
            }
            
            public void Set日期Null() {
                this[this.table收件箱.日期Column] = System.Convert.DBNull;
            }
            
            public bool Is已阅Null() {
                return this.IsNull(this.table收件箱.已阅Column);
            }
            
            public void Set已阅Null() {
                this[this.table收件箱.已阅Column] = System.Convert.DBNull;
            }
            
            public bool Is收件人IDNull() {
                return this.IsNull(this.table收件箱.收件人IDColumn);
            }
            
            public void Set收件人IDNull() {
                this[this.table收件箱.收件人IDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 收件箱RowChangeEvent : EventArgs {
            
            private 收件箱Row eventRow;
            
            private DataRowAction eventAction;
            
            public 收件箱RowChangeEvent(收件箱Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 收件箱Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
