//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2407
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace LIMS {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ds : DataSet {
        
        private 党群机关DataTable table党群机关;
        
        private 检校费用DataTable table检校费用;
        
        private 科室DataTable table科室;
        
        private 打印委托单DataTable table打印委托单;
        
        private 角色权限DataTable table角色权限;
        
        private 权限模块DataTable table权限模块;
        
        private 检校任务2DataTable table检校任务2;
        
        private 模板DataTable table模板;
        
        private DataRelation relation权限模块角色权限;
        
        public ds() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ds(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["党群机关"] != null)) {
                    this.Tables.Add(new 党群机关DataTable(ds.Tables["党群机关"]));
                }
                if ((ds.Tables["检校费用"] != null)) {
                    this.Tables.Add(new 检校费用DataTable(ds.Tables["检校费用"]));
                }
                if ((ds.Tables["科室"] != null)) {
                    this.Tables.Add(new 科室DataTable(ds.Tables["科室"]));
                }
                if ((ds.Tables["打印委托单"] != null)) {
                    this.Tables.Add(new 打印委托单DataTable(ds.Tables["打印委托单"]));
                }
                if ((ds.Tables["角色权限"] != null)) {
                    this.Tables.Add(new 角色权限DataTable(ds.Tables["角色权限"]));
                }
                if ((ds.Tables["权限模块"] != null)) {
                    this.Tables.Add(new 权限模块DataTable(ds.Tables["权限模块"]));
                }
                if ((ds.Tables["检校任务2"] != null)) {
                    this.Tables.Add(new 检校任务2DataTable(ds.Tables["检校任务2"]));
                }
                if ((ds.Tables["模板"] != null)) {
                    this.Tables.Add(new 模板DataTable(ds.Tables["模板"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 党群机关DataTable 党群机关 {
            get {
                return this.table党群机关;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 检校费用DataTable 检校费用 {
            get {
                return this.table检校费用;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 科室DataTable 科室 {
            get {
                return this.table科室;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 打印委托单DataTable 打印委托单 {
            get {
                return this.table打印委托单;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 角色权限DataTable 角色权限 {
            get {
                return this.table角色权限;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 权限模块DataTable 权限模块 {
            get {
                return this.table权限模块;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 检校任务2DataTable 检校任务2 {
            get {
                return this.table检校任务2;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 模板DataTable 模板 {
            get {
                return this.table模板;
            }
        }
        
        public override DataSet Clone() {
            ds cln = ((ds)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["党群机关"] != null)) {
                this.Tables.Add(new 党群机关DataTable(ds.Tables["党群机关"]));
            }
            if ((ds.Tables["检校费用"] != null)) {
                this.Tables.Add(new 检校费用DataTable(ds.Tables["检校费用"]));
            }
            if ((ds.Tables["科室"] != null)) {
                this.Tables.Add(new 科室DataTable(ds.Tables["科室"]));
            }
            if ((ds.Tables["打印委托单"] != null)) {
                this.Tables.Add(new 打印委托单DataTable(ds.Tables["打印委托单"]));
            }
            if ((ds.Tables["角色权限"] != null)) {
                this.Tables.Add(new 角色权限DataTable(ds.Tables["角色权限"]));
            }
            if ((ds.Tables["权限模块"] != null)) {
                this.Tables.Add(new 权限模块DataTable(ds.Tables["权限模块"]));
            }
            if ((ds.Tables["检校任务2"] != null)) {
                this.Tables.Add(new 检校任务2DataTable(ds.Tables["检校任务2"]));
            }
            if ((ds.Tables["模板"] != null)) {
                this.Tables.Add(new 模板DataTable(ds.Tables["模板"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.table党群机关 = ((党群机关DataTable)(this.Tables["党群机关"]));
            if ((this.table党群机关 != null)) {
                this.table党群机关.InitVars();
            }
            this.table检校费用 = ((检校费用DataTable)(this.Tables["检校费用"]));
            if ((this.table检校费用 != null)) {
                this.table检校费用.InitVars();
            }
            this.table科室 = ((科室DataTable)(this.Tables["科室"]));
            if ((this.table科室 != null)) {
                this.table科室.InitVars();
            }
            this.table打印委托单 = ((打印委托单DataTable)(this.Tables["打印委托单"]));
            if ((this.table打印委托单 != null)) {
                this.table打印委托单.InitVars();
            }
            this.table角色权限 = ((角色权限DataTable)(this.Tables["角色权限"]));
            if ((this.table角色权限 != null)) {
                this.table角色权限.InitVars();
            }
            this.table权限模块 = ((权限模块DataTable)(this.Tables["权限模块"]));
            if ((this.table权限模块 != null)) {
                this.table权限模块.InitVars();
            }
            this.table检校任务2 = ((检校任务2DataTable)(this.Tables["检校任务2"]));
            if ((this.table检校任务2 != null)) {
                this.table检校任务2.InitVars();
            }
            this.table模板 = ((模板DataTable)(this.Tables["模板"]));
            if ((this.table模板 != null)) {
                this.table模板.InitVars();
            }
            this.relation权限模块角色权限 = this.Relations["权限模块角色权限"];
        }
        
        private void InitClass() {
            this.DataSetName = "ds";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/ds.xsd";
            this.Locale = new System.Globalization.CultureInfo("zh-CN");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.table党群机关 = new 党群机关DataTable();
            this.Tables.Add(this.table党群机关);
            this.table检校费用 = new 检校费用DataTable();
            this.Tables.Add(this.table检校费用);
            this.table科室 = new 科室DataTable();
            this.Tables.Add(this.table科室);
            this.table打印委托单 = new 打印委托单DataTable();
            this.Tables.Add(this.table打印委托单);
            this.table角色权限 = new 角色权限DataTable();
            this.Tables.Add(this.table角色权限);
            this.table权限模块 = new 权限模块DataTable();
            this.Tables.Add(this.table权限模块);
            this.table检校任务2 = new 检校任务2DataTable();
            this.Tables.Add(this.table检校任务2);
            this.table模板 = new 模板DataTable();
            this.Tables.Add(this.table模板);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("权限模块角色权限", new DataColumn[] {
                        this.table权限模块.IDColumn}, new DataColumn[] {
                        this.table角色权限.权限IDColumn});
            this.table角色权限.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relation权限模块角色权限 = new DataRelation("权限模块角色权限", new DataColumn[] {
                        this.table权限模块.IDColumn}, new DataColumn[] {
                        this.table角色权限.权限IDColumn}, false);
            this.Relations.Add(this.relation权限模块角色权限);
        }
        
        private bool ShouldSerialize党群机关() {
            return false;
        }
        
        private bool ShouldSerialize检校费用() {
            return false;
        }
        
        private bool ShouldSerialize科室() {
            return false;
        }
        
        private bool ShouldSerialize打印委托单() {
            return false;
        }
        
        private bool ShouldSerialize角色权限() {
            return false;
        }
        
        private bool ShouldSerialize权限模块() {
            return false;
        }
        
        private bool ShouldSerialize检校任务2() {
            return false;
        }
        
        private bool ShouldSerialize模板() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void 党群机关RowChangeEventHandler(object sender, 党群机关RowChangeEvent e);
        
        public delegate void 检校费用RowChangeEventHandler(object sender, 检校费用RowChangeEvent e);
        
        public delegate void 科室RowChangeEventHandler(object sender, 科室RowChangeEvent e);
        
        public delegate void 打印委托单RowChangeEventHandler(object sender, 打印委托单RowChangeEvent e);
        
        public delegate void 角色权限RowChangeEventHandler(object sender, 角色权限RowChangeEvent e);
        
        public delegate void 权限模块RowChangeEventHandler(object sender, 权限模块RowChangeEvent e);
        
        public delegate void 检校任务2RowChangeEventHandler(object sender, 检校任务2RowChangeEvent e);
        
        public delegate void 模板RowChangeEventHandler(object sender, 模板RowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 党群机关DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn column单位;
            
            private DataColumn column用人______司局;
            
            private DataColumn column职位名称;
            
            private DataColumn column职位简介;
            
            private DataColumn column职位编号;
            
            private DataColumn column考试类别;
            
            private DataColumn column招考人数;
            
            private DataColumn column专业;
            
            private DataColumn column学历;
            
            private DataColumn column政治面貌;
            
            private DataColumn column是否要求具有2年以上基层工作经历;
            
            private DataColumn column其他条件;
            
            private DataColumn column备注;
            
            internal 党群机关DataTable() : 
                    base("党群机关") {
                this.InitClass();
            }
            
            internal 党群机关DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn 单位Column {
                get {
                    return this.column单位;
                }
            }
            
            internal DataColumn 用人______司局Column {
                get {
                    return this.column用人______司局;
                }
            }
            
            internal DataColumn 职位名称Column {
                get {
                    return this.column职位名称;
                }
            }
            
            internal DataColumn 职位简介Column {
                get {
                    return this.column职位简介;
                }
            }
            
            internal DataColumn 职位编号Column {
                get {
                    return this.column职位编号;
                }
            }
            
            internal DataColumn 考试类别Column {
                get {
                    return this.column考试类别;
                }
            }
            
            internal DataColumn 招考人数Column {
                get {
                    return this.column招考人数;
                }
            }
            
            internal DataColumn 专业Column {
                get {
                    return this.column专业;
                }
            }
            
            internal DataColumn 学历Column {
                get {
                    return this.column学历;
                }
            }
            
            internal DataColumn 政治面貌Column {
                get {
                    return this.column政治面貌;
                }
            }
            
            internal DataColumn 是否要求具有2年以上基层工作经历Column {
                get {
                    return this.column是否要求具有2年以上基层工作经历;
                }
            }
            
            internal DataColumn 其他条件Column {
                get {
                    return this.column其他条件;
                }
            }
            
            internal DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            public 党群机关Row this[int index] {
                get {
                    return ((党群机关Row)(this.Rows[index]));
                }
            }
            
            public event 党群机关RowChangeEventHandler 党群机关RowChanged;
            
            public event 党群机关RowChangeEventHandler 党群机关RowChanging;
            
            public event 党群机关RowChangeEventHandler 党群机关RowDeleted;
            
            public event 党群机关RowChangeEventHandler 党群机关RowDeleting;
            
            public void Add党群机关Row(党群机关Row row) {
                this.Rows.Add(row);
            }
            
            public 党群机关Row Add党群机关Row(string 单位, string 用人______司局, string 职位名称, string 职位简介, int 职位编号, string 考试类别, int 招考人数, string 专业, string 学历, string 政治面貌, string 是否要求具有2年以上基层工作经历, string 其他条件, string 备注) {
                党群机关Row row党群机关Row = ((党群机关Row)(this.NewRow()));
                row党群机关Row.ItemArray = new object[] {
                        null,
                        单位,
                        用人______司局,
                        职位名称,
                        职位简介,
                        职位编号,
                        考试类别,
                        招考人数,
                        专业,
                        学历,
                        政治面貌,
                        是否要求具有2年以上基层工作经历,
                        其他条件,
                        备注};
                this.Rows.Add(row党群机关Row);
                return row党群机关Row;
            }
            
            public 党群机关Row FindByID(int ID) {
                return ((党群机关Row)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                党群机关DataTable cln = ((党群机关DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 党群机关DataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.column单位 = this.Columns["单位"];
                this.column用人______司局 = this.Columns["用人      司局"];
                this.column职位名称 = this.Columns["职位名称"];
                this.column职位简介 = this.Columns["职位简介"];
                this.column职位编号 = this.Columns["职位编号"];
                this.column考试类别 = this.Columns["考试类别"];
                this.column招考人数 = this.Columns["招考人数"];
                this.column专业 = this.Columns["专业"];
                this.column学历 = this.Columns["学历"];
                this.column政治面貌 = this.Columns["政治面貌"];
                this.column是否要求具有2年以上基层工作经历 = this.Columns["是否要求具有2年以上基层工作经历"];
                this.column其他条件 = this.Columns["其他条件"];
                this.column备注 = this.Columns["备注"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.column单位 = new DataColumn("单位", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column单位);
                this.column用人______司局 = new DataColumn("用人      司局", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column用人______司局);
                this.column职位名称 = new DataColumn("职位名称", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column职位名称);
                this.column职位简介 = new DataColumn("职位简介", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column职位简介);
                this.column职位编号 = new DataColumn("职位编号", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column职位编号);
                this.column考试类别 = new DataColumn("考试类别", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column考试类别);
                this.column招考人数 = new DataColumn("招考人数", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column招考人数);
                this.column专业 = new DataColumn("专业", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column专业);
                this.column学历 = new DataColumn("学历", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column学历);
                this.column政治面貌 = new DataColumn("政治面貌", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column政治面貌);
                this.column是否要求具有2年以上基层工作经历 = new DataColumn("是否要求具有2年以上基层工作经历", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column是否要求具有2年以上基层工作经历);
                this.column其他条件 = new DataColumn("其他条件", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column其他条件);
                this.column备注 = new DataColumn("备注", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column备注);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
            }
            
            public 党群机关Row New党群机关Row() {
                return ((党群机关Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 党群机关Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(党群机关Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.党群机关RowChanged != null)) {
                    this.党群机关RowChanged(this, new 党群机关RowChangeEvent(((党群机关Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.党群机关RowChanging != null)) {
                    this.党群机关RowChanging(this, new 党群机关RowChangeEvent(((党群机关Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.党群机关RowDeleted != null)) {
                    this.党群机关RowDeleted(this, new 党群机关RowChangeEvent(((党群机关Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.党群机关RowDeleting != null)) {
                    this.党群机关RowDeleting(this, new 党群机关RowChangeEvent(((党群机关Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove党群机关Row(党群机关Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 党群机关Row : DataRow {
            
            private 党群机关DataTable table党群机关;
            
            internal 党群机关Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table党群机关 = ((党群机关DataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.table党群机关.IDColumn]));
                }
                set {
                    this[this.table党群机关.IDColumn] = value;
                }
            }
            
            public string 单位 {
                get {
                    try {
                        return ((string)(this[this.table党群机关.单位Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table党群机关.单位Column] = value;
                }
            }
            
            public string 用人______司局 {
                get {
                    try {
                        return ((string)(this[this.table党群机关.用人______司局Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table党群机关.用人______司局Column] = value;
                }
            }
            
            public string 职位名称 {
                get {
                    try {
                        return ((string)(this[this.table党群机关.职位名称Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table党群机关.职位名称Column] = value;
                }
            }
            
            public string 职位简介 {
                get {
                    try {
                        return ((string)(this[this.table党群机关.职位简介Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table党群机关.职位简介Column] = value;
                }
            }
            
            public int 职位编号 {
                get {
                    try {
                        return ((int)(this[this.table党群机关.职位编号Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table党群机关.职位编号Column] = value;
                }
            }
            
            public string 考试类别 {
                get {
                    try {
                        return ((string)(this[this.table党群机关.考试类别Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table党群机关.考试类别Column] = value;
                }
            }
            
            public int 招考人数 {
                get {
                    try {
                        return ((int)(this[this.table党群机关.招考人数Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table党群机关.招考人数Column] = value;
                }
            }
            
            public string 专业 {
                get {
                    try {
                        return ((string)(this[this.table党群机关.专业Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table党群机关.专业Column] = value;
                }
            }
            
            public string 学历 {
                get {
                    try {
                        return ((string)(this[this.table党群机关.学历Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table党群机关.学历Column] = value;
                }
            }
            
            public string 政治面貌 {
                get {
                    try {
                        return ((string)(this[this.table党群机关.政治面貌Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table党群机关.政治面貌Column] = value;
                }
            }
            
            public string 是否要求具有2年以上基层工作经历 {
                get {
                    try {
                        return ((string)(this[this.table党群机关.是否要求具有2年以上基层工作经历Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table党群机关.是否要求具有2年以上基层工作经历Column] = value;
                }
            }
            
            public string 其他条件 {
                get {
                    try {
                        return ((string)(this[this.table党群机关.其他条件Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table党群机关.其他条件Column] = value;
                }
            }
            
            public string 备注 {
                get {
                    try {
                        return ((string)(this[this.table党群机关.备注Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table党群机关.备注Column] = value;
                }
            }
            
            public bool Is单位Null() {
                return this.IsNull(this.table党群机关.单位Column);
            }
            
            public void Set单位Null() {
                this[this.table党群机关.单位Column] = System.Convert.DBNull;
            }
            
            public bool Is用人______司局Null() {
                return this.IsNull(this.table党群机关.用人______司局Column);
            }
            
            public void Set用人______司局Null() {
                this[this.table党群机关.用人______司局Column] = System.Convert.DBNull;
            }
            
            public bool Is职位名称Null() {
                return this.IsNull(this.table党群机关.职位名称Column);
            }
            
            public void Set职位名称Null() {
                this[this.table党群机关.职位名称Column] = System.Convert.DBNull;
            }
            
            public bool Is职位简介Null() {
                return this.IsNull(this.table党群机关.职位简介Column);
            }
            
            public void Set职位简介Null() {
                this[this.table党群机关.职位简介Column] = System.Convert.DBNull;
            }
            
            public bool Is职位编号Null() {
                return this.IsNull(this.table党群机关.职位编号Column);
            }
            
            public void Set职位编号Null() {
                this[this.table党群机关.职位编号Column] = System.Convert.DBNull;
            }
            
            public bool Is考试类别Null() {
                return this.IsNull(this.table党群机关.考试类别Column);
            }
            
            public void Set考试类别Null() {
                this[this.table党群机关.考试类别Column] = System.Convert.DBNull;
            }
            
            public bool Is招考人数Null() {
                return this.IsNull(this.table党群机关.招考人数Column);
            }
            
            public void Set招考人数Null() {
                this[this.table党群机关.招考人数Column] = System.Convert.DBNull;
            }
            
            public bool Is专业Null() {
                return this.IsNull(this.table党群机关.专业Column);
            }
            
            public void Set专业Null() {
                this[this.table党群机关.专业Column] = System.Convert.DBNull;
            }
            
            public bool Is学历Null() {
                return this.IsNull(this.table党群机关.学历Column);
            }
            
            public void Set学历Null() {
                this[this.table党群机关.学历Column] = System.Convert.DBNull;
            }
            
            public bool Is政治面貌Null() {
                return this.IsNull(this.table党群机关.政治面貌Column);
            }
            
            public void Set政治面貌Null() {
                this[this.table党群机关.政治面貌Column] = System.Convert.DBNull;
            }
            
            public bool Is是否要求具有2年以上基层工作经历Null() {
                return this.IsNull(this.table党群机关.是否要求具有2年以上基层工作经历Column);
            }
            
            public void Set是否要求具有2年以上基层工作经历Null() {
                this[this.table党群机关.是否要求具有2年以上基层工作经历Column] = System.Convert.DBNull;
            }
            
            public bool Is其他条件Null() {
                return this.IsNull(this.table党群机关.其他条件Column);
            }
            
            public void Set其他条件Null() {
                this[this.table党群机关.其他条件Column] = System.Convert.DBNull;
            }
            
            public bool Is备注Null() {
                return this.IsNull(this.table党群机关.备注Column);
            }
            
            public void Set备注Null() {
                this[this.table党群机关.备注Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 党群机关RowChangeEvent : EventArgs {
            
            private 党群机关Row eventRow;
            
            private DataRowAction eventAction;
            
            public 党群机关RowChangeEvent(党群机关Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 党群机关Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 检校费用DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn column检校设备编号;
            
            private DataColumn column检定费用;
            
            private DataColumn column校准费用;
            
            private DataColumn column修理费用;
            
            private DataColumn column配件费用;
            
            private DataColumn column应交费用;
            
            private DataColumn column实交费用;
            
            private DataColumn column交费日期;
            
            internal 检校费用DataTable() : 
                    base("检校费用") {
                this.InitClass();
            }
            
            internal 检校费用DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn 检校设备编号Column {
                get {
                    return this.column检校设备编号;
                }
            }
            
            internal DataColumn 检定费用Column {
                get {
                    return this.column检定费用;
                }
            }
            
            internal DataColumn 校准费用Column {
                get {
                    return this.column校准费用;
                }
            }
            
            internal DataColumn 修理费用Column {
                get {
                    return this.column修理费用;
                }
            }
            
            internal DataColumn 配件费用Column {
                get {
                    return this.column配件费用;
                }
            }
            
            internal DataColumn 应交费用Column {
                get {
                    return this.column应交费用;
                }
            }
            
            internal DataColumn 实交费用Column {
                get {
                    return this.column实交费用;
                }
            }
            
            internal DataColumn 交费日期Column {
                get {
                    return this.column交费日期;
                }
            }
            
            public 检校费用Row this[int index] {
                get {
                    return ((检校费用Row)(this.Rows[index]));
                }
            }
            
            public event 检校费用RowChangeEventHandler 检校费用RowChanged;
            
            public event 检校费用RowChangeEventHandler 检校费用RowChanging;
            
            public event 检校费用RowChangeEventHandler 检校费用RowDeleted;
            
            public event 检校费用RowChangeEventHandler 检校费用RowDeleting;
            
            public void Add检校费用Row(检校费用Row row) {
                this.Rows.Add(row);
            }
            
            public 检校费用Row Add检校费用Row(string 检校设备编号, int 检定费用, int 校准费用, int 修理费用, int 配件费用, int 应交费用, int 实交费用, System.DateTime 交费日期) {
                检校费用Row row检校费用Row = ((检校费用Row)(this.NewRow()));
                row检校费用Row.ItemArray = new object[] {
                        null,
                        检校设备编号,
                        检定费用,
                        校准费用,
                        修理费用,
                        配件费用,
                        应交费用,
                        实交费用,
                        交费日期};
                this.Rows.Add(row检校费用Row);
                return row检校费用Row;
            }
            
            public 检校费用Row FindByID(int ID) {
                return ((检校费用Row)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                检校费用DataTable cln = ((检校费用DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 检校费用DataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.column检校设备编号 = this.Columns["检校设备编号"];
                this.column检定费用 = this.Columns["检定费用"];
                this.column校准费用 = this.Columns["校准费用"];
                this.column修理费用 = this.Columns["修理费用"];
                this.column配件费用 = this.Columns["配件费用"];
                this.column应交费用 = this.Columns["应交费用"];
                this.column实交费用 = this.Columns["实交费用"];
                this.column交费日期 = this.Columns["交费日期"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.column检校设备编号 = new DataColumn("检校设备编号", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column检校设备编号);
                this.column检定费用 = new DataColumn("检定费用", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column检定费用);
                this.column校准费用 = new DataColumn("校准费用", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column校准费用);
                this.column修理费用 = new DataColumn("修理费用", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column修理费用);
                this.column配件费用 = new DataColumn("配件费用", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column配件费用);
                this.column应交费用 = new DataColumn("应交费用", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column应交费用);
                this.column实交费用 = new DataColumn("实交费用", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column实交费用);
                this.column交费日期 = new DataColumn("交费日期", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column交费日期);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
            }
            
            public 检校费用Row New检校费用Row() {
                return ((检校费用Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 检校费用Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(检校费用Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.检校费用RowChanged != null)) {
                    this.检校费用RowChanged(this, new 检校费用RowChangeEvent(((检校费用Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.检校费用RowChanging != null)) {
                    this.检校费用RowChanging(this, new 检校费用RowChangeEvent(((检校费用Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.检校费用RowDeleted != null)) {
                    this.检校费用RowDeleted(this, new 检校费用RowChangeEvent(((检校费用Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.检校费用RowDeleting != null)) {
                    this.检校费用RowDeleting(this, new 检校费用RowChangeEvent(((检校费用Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove检校费用Row(检校费用Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 检校费用Row : DataRow {
            
            private 检校费用DataTable table检校费用;
            
            internal 检校费用Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table检校费用 = ((检校费用DataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.table检校费用.IDColumn]));
                }
                set {
                    this[this.table检校费用.IDColumn] = value;
                }
            }
            
            public string 检校设备编号 {
                get {
                    try {
                        return ((string)(this[this.table检校费用.检校设备编号Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table检校费用.检校设备编号Column] = value;
                }
            }
            
            public int 检定费用 {
                get {
                    try {
                        return ((int)(this[this.table检校费用.检定费用Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table检校费用.检定费用Column] = value;
                }
            }
            
            public int 校准费用 {
                get {
                    try {
                        return ((int)(this[this.table检校费用.校准费用Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table检校费用.校准费用Column] = value;
                }
            }
            
            public int 修理费用 {
                get {
                    try {
                        return ((int)(this[this.table检校费用.修理费用Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table检校费用.修理费用Column] = value;
                }
            }
            
            public int 配件费用 {
                get {
                    try {
                        return ((int)(this[this.table检校费用.配件费用Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table检校费用.配件费用Column] = value;
                }
            }
            
            public int 应交费用 {
                get {
                    try {
                        return ((int)(this[this.table检校费用.应交费用Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table检校费用.应交费用Column] = value;
                }
            }
            
            public int 实交费用 {
                get {
                    try {
                        return ((int)(this[this.table检校费用.实交费用Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table检校费用.实交费用Column] = value;
                }
            }
            
            public System.DateTime 交费日期 {
                get {
                    try {
                        return ((System.DateTime)(this[this.table检校费用.交费日期Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table检校费用.交费日期Column] = value;
                }
            }
            
            public bool Is检校设备编号Null() {
                return this.IsNull(this.table检校费用.检校设备编号Column);
            }
            
            public void Set检校设备编号Null() {
                this[this.table检校费用.检校设备编号Column] = System.Convert.DBNull;
            }
            
            public bool Is检定费用Null() {
                return this.IsNull(this.table检校费用.检定费用Column);
            }
            
            public void Set检定费用Null() {
                this[this.table检校费用.检定费用Column] = System.Convert.DBNull;
            }
            
            public bool Is校准费用Null() {
                return this.IsNull(this.table检校费用.校准费用Column);
            }
            
            public void Set校准费用Null() {
                this[this.table检校费用.校准费用Column] = System.Convert.DBNull;
            }
            
            public bool Is修理费用Null() {
                return this.IsNull(this.table检校费用.修理费用Column);
            }
            
            public void Set修理费用Null() {
                this[this.table检校费用.修理费用Column] = System.Convert.DBNull;
            }
            
            public bool Is配件费用Null() {
                return this.IsNull(this.table检校费用.配件费用Column);
            }
            
            public void Set配件费用Null() {
                this[this.table检校费用.配件费用Column] = System.Convert.DBNull;
            }
            
            public bool Is应交费用Null() {
                return this.IsNull(this.table检校费用.应交费用Column);
            }
            
            public void Set应交费用Null() {
                this[this.table检校费用.应交费用Column] = System.Convert.DBNull;
            }
            
            public bool Is实交费用Null() {
                return this.IsNull(this.table检校费用.实交费用Column);
            }
            
            public void Set实交费用Null() {
                this[this.table检校费用.实交费用Column] = System.Convert.DBNull;
            }
            
            public bool Is交费日期Null() {
                return this.IsNull(this.table检校费用.交费日期Column);
            }
            
            public void Set交费日期Null() {
                this[this.table检校费用.交费日期Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 检校费用RowChangeEvent : EventArgs {
            
            private 检校费用Row eventRow;
            
            private DataRowAction eventAction;
            
            public 检校费用RowChangeEvent(检校费用Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 检校费用Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 科室DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn column科室名称;
            
            private DataColumn columnID;
            
            internal 科室DataTable() : 
                    base("科室") {
                this.InitClass();
            }
            
            internal 科室DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn 科室名称Column {
                get {
                    return this.column科室名称;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            public 科室Row this[int index] {
                get {
                    return ((科室Row)(this.Rows[index]));
                }
            }
            
            public event 科室RowChangeEventHandler 科室RowChanged;
            
            public event 科室RowChangeEventHandler 科室RowChanging;
            
            public event 科室RowChangeEventHandler 科室RowDeleted;
            
            public event 科室RowChangeEventHandler 科室RowDeleting;
            
            public void Add科室Row(科室Row row) {
                this.Rows.Add(row);
            }
            
            public 科室Row Add科室Row(string 科室名称) {
                科室Row row科室Row = ((科室Row)(this.NewRow()));
                row科室Row.ItemArray = new object[] {
                        科室名称,
                        null};
                this.Rows.Add(row科室Row);
                return row科室Row;
            }
            
            public 科室Row FindByID(int ID) {
                return ((科室Row)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                科室DataTable cln = ((科室DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 科室DataTable();
            }
            
            internal void InitVars() {
                this.column科室名称 = this.Columns["科室名称"];
                this.columnID = this.Columns["ID"];
            }
            
            private void InitClass() {
                this.column科室名称 = new DataColumn("科室名称", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column科室名称);
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
            }
            
            public 科室Row New科室Row() {
                return ((科室Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 科室Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(科室Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.科室RowChanged != null)) {
                    this.科室RowChanged(this, new 科室RowChangeEvent(((科室Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.科室RowChanging != null)) {
                    this.科室RowChanging(this, new 科室RowChangeEvent(((科室Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.科室RowDeleted != null)) {
                    this.科室RowDeleted(this, new 科室RowChangeEvent(((科室Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.科室RowDeleting != null)) {
                    this.科室RowDeleting(this, new 科室RowChangeEvent(((科室Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove科室Row(科室Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 科室Row : DataRow {
            
            private 科室DataTable table科室;
            
            internal 科室Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table科室 = ((科室DataTable)(this.Table));
            }
            
            public string 科室名称 {
                get {
                    try {
                        return ((string)(this[this.table科室.科室名称Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table科室.科室名称Column] = value;
                }
            }
            
            public int ID {
                get {
                    return ((int)(this[this.table科室.IDColumn]));
                }
                set {
                    this[this.table科室.IDColumn] = value;
                }
            }
            
            public bool Is科室名称Null() {
                return this.IsNull(this.table科室.科室名称Column);
            }
            
            public void Set科室名称Null() {
                this[this.table科室.科室名称Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 科室RowChangeEvent : EventArgs {
            
            private 科室Row eventRow;
            
            private DataRowAction eventAction;
            
            public 科室RowChangeEvent(科室Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 科室Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 打印委托单DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn column器具名称;
            
            private DataColumn column型号规格;
            
            private DataColumn column出厂编号;
            
            private DataColumn column器具数量;
            
            private DataColumn column检定费用;
            
            private DataColumn column校准费用;
            
            private DataColumn column修理费用;
            
            private DataColumn column配件费用;
            
            private DataColumn column应交费用;
            
            private DataColumn column备注;
            
            internal 打印委托单DataTable() : 
                    base("打印委托单") {
                this.InitClass();
            }
            
            internal 打印委托单DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn 器具名称Column {
                get {
                    return this.column器具名称;
                }
            }
            
            internal DataColumn 型号规格Column {
                get {
                    return this.column型号规格;
                }
            }
            
            internal DataColumn 出厂编号Column {
                get {
                    return this.column出厂编号;
                }
            }
            
            internal DataColumn 器具数量Column {
                get {
                    return this.column器具数量;
                }
            }
            
            internal DataColumn 检定费用Column {
                get {
                    return this.column检定费用;
                }
            }
            
            internal DataColumn 校准费用Column {
                get {
                    return this.column校准费用;
                }
            }
            
            internal DataColumn 修理费用Column {
                get {
                    return this.column修理费用;
                }
            }
            
            internal DataColumn 配件费用Column {
                get {
                    return this.column配件费用;
                }
            }
            
            internal DataColumn 应交费用Column {
                get {
                    return this.column应交费用;
                }
            }
            
            internal DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            public 打印委托单Row this[int index] {
                get {
                    return ((打印委托单Row)(this.Rows[index]));
                }
            }
            
            public event 打印委托单RowChangeEventHandler 打印委托单RowChanged;
            
            public event 打印委托单RowChangeEventHandler 打印委托单RowChanging;
            
            public event 打印委托单RowChangeEventHandler 打印委托单RowDeleted;
            
            public event 打印委托单RowChangeEventHandler 打印委托单RowDeleting;
            
            public void Add打印委托单Row(打印委托单Row row) {
                this.Rows.Add(row);
            }
            
            public 打印委托单Row Add打印委托单Row(string 器具名称, string 型号规格, string 出厂编号, int 器具数量, System.Decimal 检定费用, System.Decimal 校准费用, System.Decimal 修理费用, System.Decimal 配件费用, System.Decimal 应交费用, string 备注) {
                打印委托单Row row打印委托单Row = ((打印委托单Row)(this.NewRow()));
                row打印委托单Row.ItemArray = new object[] {
                        器具名称,
                        型号规格,
                        出厂编号,
                        器具数量,
                        检定费用,
                        校准费用,
                        修理费用,
                        配件费用,
                        应交费用,
                        备注};
                this.Rows.Add(row打印委托单Row);
                return row打印委托单Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                打印委托单DataTable cln = ((打印委托单DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 打印委托单DataTable();
            }
            
            internal void InitVars() {
                this.column器具名称 = this.Columns["器具名称"];
                this.column型号规格 = this.Columns["型号规格"];
                this.column出厂编号 = this.Columns["出厂编号"];
                this.column器具数量 = this.Columns["器具数量"];
                this.column检定费用 = this.Columns["检定费用"];
                this.column校准费用 = this.Columns["校准费用"];
                this.column修理费用 = this.Columns["修理费用"];
                this.column配件费用 = this.Columns["配件费用"];
                this.column应交费用 = this.Columns["应交费用"];
                this.column备注 = this.Columns["备注"];
            }
            
            private void InitClass() {
                this.column器具名称 = new DataColumn("器具名称", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column器具名称);
                this.column型号规格 = new DataColumn("型号规格", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column型号规格);
                this.column出厂编号 = new DataColumn("出厂编号", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column出厂编号);
                this.column器具数量 = new DataColumn("器具数量", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column器具数量);
                this.column检定费用 = new DataColumn("检定费用", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column检定费用);
                this.column校准费用 = new DataColumn("校准费用", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column校准费用);
                this.column修理费用 = new DataColumn("修理费用", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column修理费用);
                this.column配件费用 = new DataColumn("配件费用", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column配件费用);
                this.column应交费用 = new DataColumn("应交费用", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column应交费用);
                this.column备注 = new DataColumn("备注", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column备注);
                this.column器具名称.AllowDBNull = false;
            }
            
            public 打印委托单Row New打印委托单Row() {
                return ((打印委托单Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 打印委托单Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(打印委托单Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.打印委托单RowChanged != null)) {
                    this.打印委托单RowChanged(this, new 打印委托单RowChangeEvent(((打印委托单Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.打印委托单RowChanging != null)) {
                    this.打印委托单RowChanging(this, new 打印委托单RowChangeEvent(((打印委托单Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.打印委托单RowDeleted != null)) {
                    this.打印委托单RowDeleted(this, new 打印委托单RowChangeEvent(((打印委托单Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.打印委托单RowDeleting != null)) {
                    this.打印委托单RowDeleting(this, new 打印委托单RowChangeEvent(((打印委托单Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove打印委托单Row(打印委托单Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 打印委托单Row : DataRow {
            
            private 打印委托单DataTable table打印委托单;
            
            internal 打印委托单Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table打印委托单 = ((打印委托单DataTable)(this.Table));
            }
            
            public string 器具名称 {
                get {
                    return ((string)(this[this.table打印委托单.器具名称Column]));
                }
                set {
                    this[this.table打印委托单.器具名称Column] = value;
                }
            }
            
            public string 型号规格 {
                get {
                    try {
                        return ((string)(this[this.table打印委托单.型号规格Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table打印委托单.型号规格Column] = value;
                }
            }
            
            public string 出厂编号 {
                get {
                    try {
                        return ((string)(this[this.table打印委托单.出厂编号Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table打印委托单.出厂编号Column] = value;
                }
            }
            
            public int 器具数量 {
                get {
                    try {
                        return ((int)(this[this.table打印委托单.器具数量Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table打印委托单.器具数量Column] = value;
                }
            }
            
            public System.Decimal 检定费用 {
                get {
                    try {
                        return ((System.Decimal)(this[this.table打印委托单.检定费用Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table打印委托单.检定费用Column] = value;
                }
            }
            
            public System.Decimal 校准费用 {
                get {
                    try {
                        return ((System.Decimal)(this[this.table打印委托单.校准费用Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table打印委托单.校准费用Column] = value;
                }
            }
            
            public System.Decimal 修理费用 {
                get {
                    try {
                        return ((System.Decimal)(this[this.table打印委托单.修理费用Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table打印委托单.修理费用Column] = value;
                }
            }
            
            public System.Decimal 配件费用 {
                get {
                    try {
                        return ((System.Decimal)(this[this.table打印委托单.配件费用Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table打印委托单.配件费用Column] = value;
                }
            }
            
            public System.Decimal 应交费用 {
                get {
                    try {
                        return ((System.Decimal)(this[this.table打印委托单.应交费用Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table打印委托单.应交费用Column] = value;
                }
            }
            
            public string 备注 {
                get {
                    try {
                        return ((string)(this[this.table打印委托单.备注Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table打印委托单.备注Column] = value;
                }
            }
            
            public bool Is型号规格Null() {
                return this.IsNull(this.table打印委托单.型号规格Column);
            }
            
            public void Set型号规格Null() {
                this[this.table打印委托单.型号规格Column] = System.Convert.DBNull;
            }
            
            public bool Is出厂编号Null() {
                return this.IsNull(this.table打印委托单.出厂编号Column);
            }
            
            public void Set出厂编号Null() {
                this[this.table打印委托单.出厂编号Column] = System.Convert.DBNull;
            }
            
            public bool Is器具数量Null() {
                return this.IsNull(this.table打印委托单.器具数量Column);
            }
            
            public void Set器具数量Null() {
                this[this.table打印委托单.器具数量Column] = System.Convert.DBNull;
            }
            
            public bool Is检定费用Null() {
                return this.IsNull(this.table打印委托单.检定费用Column);
            }
            
            public void Set检定费用Null() {
                this[this.table打印委托单.检定费用Column] = System.Convert.DBNull;
            }
            
            public bool Is校准费用Null() {
                return this.IsNull(this.table打印委托单.校准费用Column);
            }
            
            public void Set校准费用Null() {
                this[this.table打印委托单.校准费用Column] = System.Convert.DBNull;
            }
            
            public bool Is修理费用Null() {
                return this.IsNull(this.table打印委托单.修理费用Column);
            }
            
            public void Set修理费用Null() {
                this[this.table打印委托单.修理费用Column] = System.Convert.DBNull;
            }
            
            public bool Is配件费用Null() {
                return this.IsNull(this.table打印委托单.配件费用Column);
            }
            
            public void Set配件费用Null() {
                this[this.table打印委托单.配件费用Column] = System.Convert.DBNull;
            }
            
            public bool Is应交费用Null() {
                return this.IsNull(this.table打印委托单.应交费用Column);
            }
            
            public void Set应交费用Null() {
                this[this.table打印委托单.应交费用Column] = System.Convert.DBNull;
            }
            
            public bool Is备注Null() {
                return this.IsNull(this.table打印委托单.备注Column);
            }
            
            public void Set备注Null() {
                this[this.table打印委托单.备注Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 打印委托单RowChangeEvent : EventArgs {
            
            private 打印委托单Row eventRow;
            
            private DataRowAction eventAction;
            
            public 打印委托单RowChangeEvent(打印委托单Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 打印委托单Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 角色权限DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn column角色ID;
            
            private DataColumn column权限ID;
            
            internal 角色权限DataTable() : 
                    base("角色权限") {
                this.InitClass();
            }
            
            internal 角色权限DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn 角色IDColumn {
                get {
                    return this.column角色ID;
                }
            }
            
            internal DataColumn 权限IDColumn {
                get {
                    return this.column权限ID;
                }
            }
            
            public 角色权限Row this[int index] {
                get {
                    return ((角色权限Row)(this.Rows[index]));
                }
            }
            
            public event 角色权限RowChangeEventHandler 角色权限RowChanged;
            
            public event 角色权限RowChangeEventHandler 角色权限RowChanging;
            
            public event 角色权限RowChangeEventHandler 角色权限RowDeleted;
            
            public event 角色权限RowChangeEventHandler 角色权限RowDeleting;
            
            public void Add角色权限Row(角色权限Row row) {
                this.Rows.Add(row);
            }
            
            public 角色权限Row Add角色权限Row(int 角色ID, 权限模块Row parent权限模块RowBy权限模块角色权限) {
                角色权限Row row角色权限Row = ((角色权限Row)(this.NewRow()));
                row角色权限Row.ItemArray = new object[] {
                        null,
                        角色ID,
                        parent权限模块RowBy权限模块角色权限[0]};
                this.Rows.Add(row角色权限Row);
                return row角色权限Row;
            }
            
            public 角色权限Row FindByID(int ID) {
                return ((角色权限Row)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                角色权限DataTable cln = ((角色权限DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 角色权限DataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.column角色ID = this.Columns["角色ID"];
                this.column权限ID = this.Columns["权限ID"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.column角色ID = new DataColumn("角色ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column角色ID);
                this.column权限ID = new DataColumn("权限ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column权限ID);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.column角色ID.AllowDBNull = false;
                this.column权限ID.AllowDBNull = false;
            }
            
            public 角色权限Row New角色权限Row() {
                return ((角色权限Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 角色权限Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(角色权限Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.角色权限RowChanged != null)) {
                    this.角色权限RowChanged(this, new 角色权限RowChangeEvent(((角色权限Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.角色权限RowChanging != null)) {
                    this.角色权限RowChanging(this, new 角色权限RowChangeEvent(((角色权限Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.角色权限RowDeleted != null)) {
                    this.角色权限RowDeleted(this, new 角色权限RowChangeEvent(((角色权限Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.角色权限RowDeleting != null)) {
                    this.角色权限RowDeleting(this, new 角色权限RowChangeEvent(((角色权限Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove角色权限Row(角色权限Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 角色权限Row : DataRow {
            
            private 角色权限DataTable table角色权限;
            
            internal 角色权限Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table角色权限 = ((角色权限DataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.table角色权限.IDColumn]));
                }
                set {
                    this[this.table角色权限.IDColumn] = value;
                }
            }
            
            public int 角色ID {
                get {
                    return ((int)(this[this.table角色权限.角色IDColumn]));
                }
                set {
                    this[this.table角色权限.角色IDColumn] = value;
                }
            }
            
            public int 权限ID {
                get {
                    return ((int)(this[this.table角色权限.权限IDColumn]));
                }
                set {
                    this[this.table角色权限.权限IDColumn] = value;
                }
            }
            
            public 权限模块Row 权限模块Row {
                get {
                    return ((权限模块Row)(this.GetParentRow(this.Table.ParentRelations["权限模块角色权限"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["权限模块角色权限"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 角色权限RowChangeEvent : EventArgs {
            
            private 角色权限Row eventRow;
            
            private DataRowAction eventAction;
            
            public 角色权限RowChangeEvent(角色权限Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 角色权限Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 权限模块DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn column权限模块名;
            
            private DataColumn column类别;
            
            private DataColumn column菜单级别;
            
            private DataColumn column菜单项目ID;
            
            private DataColumn column链接地址;
            
            private DataColumn column备注;
            
            internal 权限模块DataTable() : 
                    base("权限模块") {
                this.InitClass();
            }
            
            internal 权限模块DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn 权限模块名Column {
                get {
                    return this.column权限模块名;
                }
            }
            
            internal DataColumn 类别Column {
                get {
                    return this.column类别;
                }
            }
            
            internal DataColumn 菜单级别Column {
                get {
                    return this.column菜单级别;
                }
            }
            
            internal DataColumn 菜单项目IDColumn {
                get {
                    return this.column菜单项目ID;
                }
            }
            
            internal DataColumn 链接地址Column {
                get {
                    return this.column链接地址;
                }
            }
            
            internal DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            public 权限模块Row this[int index] {
                get {
                    return ((权限模块Row)(this.Rows[index]));
                }
            }
            
            public event 权限模块RowChangeEventHandler 权限模块RowChanged;
            
            public event 权限模块RowChangeEventHandler 权限模块RowChanging;
            
            public event 权限模块RowChangeEventHandler 权限模块RowDeleted;
            
            public event 权限模块RowChangeEventHandler 权限模块RowDeleting;
            
            public void Add权限模块Row(权限模块Row row) {
                this.Rows.Add(row);
            }
            
            public 权限模块Row Add权限模块Row(string 权限模块名, int 类别, int 菜单级别, int 菜单项目ID, string 链接地址, string 备注) {
                权限模块Row row权限模块Row = ((权限模块Row)(this.NewRow()));
                row权限模块Row.ItemArray = new object[] {
                        null,
                        权限模块名,
                        类别,
                        菜单级别,
                        菜单项目ID,
                        链接地址,
                        备注};
                this.Rows.Add(row权限模块Row);
                return row权限模块Row;
            }
            
            public 权限模块Row FindByID(int ID) {
                return ((权限模块Row)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                权限模块DataTable cln = ((权限模块DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 权限模块DataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.column权限模块名 = this.Columns["权限模块名"];
                this.column类别 = this.Columns["类别"];
                this.column菜单级别 = this.Columns["菜单级别"];
                this.column菜单项目ID = this.Columns["菜单项目ID"];
                this.column链接地址 = this.Columns["链接地址"];
                this.column备注 = this.Columns["备注"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.column权限模块名 = new DataColumn("权限模块名", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column权限模块名);
                this.column类别 = new DataColumn("类别", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column类别);
                this.column菜单级别 = new DataColumn("菜单级别", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column菜单级别);
                this.column菜单项目ID = new DataColumn("菜单项目ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column菜单项目ID);
                this.column链接地址 = new DataColumn("链接地址", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column链接地址);
                this.column备注 = new DataColumn("备注", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column备注);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.column权限模块名.AllowDBNull = false;
                this.column类别.AllowDBNull = false;
            }
            
            public 权限模块Row New权限模块Row() {
                return ((权限模块Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 权限模块Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(权限模块Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.权限模块RowChanged != null)) {
                    this.权限模块RowChanged(this, new 权限模块RowChangeEvent(((权限模块Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.权限模块RowChanging != null)) {
                    this.权限模块RowChanging(this, new 权限模块RowChangeEvent(((权限模块Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.权限模块RowDeleted != null)) {
                    this.权限模块RowDeleted(this, new 权限模块RowChangeEvent(((权限模块Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.权限模块RowDeleting != null)) {
                    this.权限模块RowDeleting(this, new 权限模块RowChangeEvent(((权限模块Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove权限模块Row(权限模块Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 权限模块Row : DataRow {
            
            private 权限模块DataTable table权限模块;
            
            internal 权限模块Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table权限模块 = ((权限模块DataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.table权限模块.IDColumn]));
                }
                set {
                    this[this.table权限模块.IDColumn] = value;
                }
            }
            
            public string 权限模块名 {
                get {
                    return ((string)(this[this.table权限模块.权限模块名Column]));
                }
                set {
                    this[this.table权限模块.权限模块名Column] = value;
                }
            }
            
            public int 类别 {
                get {
                    return ((int)(this[this.table权限模块.类别Column]));
                }
                set {
                    this[this.table权限模块.类别Column] = value;
                }
            }
            
            public int 菜单级别 {
                get {
                    try {
                        return ((int)(this[this.table权限模块.菜单级别Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table权限模块.菜单级别Column] = value;
                }
            }
            
            public int 菜单项目ID {
                get {
                    try {
                        return ((int)(this[this.table权限模块.菜单项目IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table权限模块.菜单项目IDColumn] = value;
                }
            }
            
            public string 链接地址 {
                get {
                    try {
                        return ((string)(this[this.table权限模块.链接地址Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table权限模块.链接地址Column] = value;
                }
            }
            
            public string 备注 {
                get {
                    try {
                        return ((string)(this[this.table权限模块.备注Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table权限模块.备注Column] = value;
                }
            }
            
            public bool Is菜单级别Null() {
                return this.IsNull(this.table权限模块.菜单级别Column);
            }
            
            public void Set菜单级别Null() {
                this[this.table权限模块.菜单级别Column] = System.Convert.DBNull;
            }
            
            public bool Is菜单项目IDNull() {
                return this.IsNull(this.table权限模块.菜单项目IDColumn);
            }
            
            public void Set菜单项目IDNull() {
                this[this.table权限模块.菜单项目IDColumn] = System.Convert.DBNull;
            }
            
            public bool Is链接地址Null() {
                return this.IsNull(this.table权限模块.链接地址Column);
            }
            
            public void Set链接地址Null() {
                this[this.table权限模块.链接地址Column] = System.Convert.DBNull;
            }
            
            public bool Is备注Null() {
                return this.IsNull(this.table权限模块.备注Column);
            }
            
            public void Set备注Null() {
                this[this.table权限模块.备注Column] = System.Convert.DBNull;
            }
            
            public 角色权限Row[] Get角色权限Rows() {
                return ((角色权限Row[])(this.GetChildRows(this.Table.ChildRelations["权限模块角色权限"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 权限模块RowChangeEvent : EventArgs {
            
            private 权限模块Row eventRow;
            
            private DataRowAction eventAction;
            
            public 权限模块RowChangeEvent(权限模块Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 权限模块Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 检校任务2DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn column编号;
            
            private DataColumn column器具名称;
            
            private DataColumn column送检单位;
            
            private DataColumn column器具数量;
            
            private DataColumn column型号规格;
            
            private DataColumn column出厂编号;
            
            internal 检校任务2DataTable() : 
                    base("检校任务2") {
                this.InitClass();
            }
            
            internal 检校任务2DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn 编号Column {
                get {
                    return this.column编号;
                }
            }
            
            internal DataColumn 器具名称Column {
                get {
                    return this.column器具名称;
                }
            }
            
            internal DataColumn 送检单位Column {
                get {
                    return this.column送检单位;
                }
            }
            
            internal DataColumn 器具数量Column {
                get {
                    return this.column器具数量;
                }
            }
            
            internal DataColumn 型号规格Column {
                get {
                    return this.column型号规格;
                }
            }
            
            internal DataColumn 出厂编号Column {
                get {
                    return this.column出厂编号;
                }
            }
            
            public 检校任务2Row this[int index] {
                get {
                    return ((检校任务2Row)(this.Rows[index]));
                }
            }
            
            public event 检校任务2RowChangeEventHandler 检校任务2RowChanged;
            
            public event 检校任务2RowChangeEventHandler 检校任务2RowChanging;
            
            public event 检校任务2RowChangeEventHandler 检校任务2RowDeleted;
            
            public event 检校任务2RowChangeEventHandler 检校任务2RowDeleting;
            
            public void Add检校任务2Row(检校任务2Row row) {
                this.Rows.Add(row);
            }
            
            public 检校任务2Row Add检校任务2Row(string 编号, string 器具名称, string 送检单位, int 器具数量, string 型号规格, string 出厂编号) {
                检校任务2Row row检校任务2Row = ((检校任务2Row)(this.NewRow()));
                row检校任务2Row.ItemArray = new object[] {
                        编号,
                        器具名称,
                        送检单位,
                        器具数量,
                        型号规格,
                        出厂编号};
                this.Rows.Add(row检校任务2Row);
                return row检校任务2Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                检校任务2DataTable cln = ((检校任务2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 检校任务2DataTable();
            }
            
            internal void InitVars() {
                this.column编号 = this.Columns["编号"];
                this.column器具名称 = this.Columns["器具名称"];
                this.column送检单位 = this.Columns["送检单位"];
                this.column器具数量 = this.Columns["器具数量"];
                this.column型号规格 = this.Columns["型号规格"];
                this.column出厂编号 = this.Columns["出厂编号"];
            }
            
            private void InitClass() {
                this.column编号 = new DataColumn("编号", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column编号);
                this.column器具名称 = new DataColumn("器具名称", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column器具名称);
                this.column送检单位 = new DataColumn("送检单位", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column送检单位);
                this.column器具数量 = new DataColumn("器具数量", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column器具数量);
                this.column型号规格 = new DataColumn("型号规格", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column型号规格);
                this.column出厂编号 = new DataColumn("出厂编号", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column出厂编号);
                this.column编号.AllowDBNull = false;
                this.column器具名称.AllowDBNull = false;
            }
            
            public 检校任务2Row New检校任务2Row() {
                return ((检校任务2Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 检校任务2Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(检校任务2Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.检校任务2RowChanged != null)) {
                    this.检校任务2RowChanged(this, new 检校任务2RowChangeEvent(((检校任务2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.检校任务2RowChanging != null)) {
                    this.检校任务2RowChanging(this, new 检校任务2RowChangeEvent(((检校任务2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.检校任务2RowDeleted != null)) {
                    this.检校任务2RowDeleted(this, new 检校任务2RowChangeEvent(((检校任务2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.检校任务2RowDeleting != null)) {
                    this.检校任务2RowDeleting(this, new 检校任务2RowChangeEvent(((检校任务2Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove检校任务2Row(检校任务2Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 检校任务2Row : DataRow {
            
            private 检校任务2DataTable table检校任务2;
            
            internal 检校任务2Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table检校任务2 = ((检校任务2DataTable)(this.Table));
            }
            
            public string 编号 {
                get {
                    return ((string)(this[this.table检校任务2.编号Column]));
                }
                set {
                    this[this.table检校任务2.编号Column] = value;
                }
            }
            
            public string 器具名称 {
                get {
                    return ((string)(this[this.table检校任务2.器具名称Column]));
                }
                set {
                    this[this.table检校任务2.器具名称Column] = value;
                }
            }
            
            public string 送检单位 {
                get {
                    try {
                        return ((string)(this[this.table检校任务2.送检单位Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table检校任务2.送检单位Column] = value;
                }
            }
            
            public int 器具数量 {
                get {
                    try {
                        return ((int)(this[this.table检校任务2.器具数量Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table检校任务2.器具数量Column] = value;
                }
            }
            
            public string 型号规格 {
                get {
                    try {
                        return ((string)(this[this.table检校任务2.型号规格Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table检校任务2.型号规格Column] = value;
                }
            }
            
            public string 出厂编号 {
                get {
                    try {
                        return ((string)(this[this.table检校任务2.出厂编号Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table检校任务2.出厂编号Column] = value;
                }
            }
            
            public bool Is送检单位Null() {
                return this.IsNull(this.table检校任务2.送检单位Column);
            }
            
            public void Set送检单位Null() {
                this[this.table检校任务2.送检单位Column] = System.Convert.DBNull;
            }
            
            public bool Is器具数量Null() {
                return this.IsNull(this.table检校任务2.器具数量Column);
            }
            
            public void Set器具数量Null() {
                this[this.table检校任务2.器具数量Column] = System.Convert.DBNull;
            }
            
            public bool Is型号规格Null() {
                return this.IsNull(this.table检校任务2.型号规格Column);
            }
            
            public void Set型号规格Null() {
                this[this.table检校任务2.型号规格Column] = System.Convert.DBNull;
            }
            
            public bool Is出厂编号Null() {
                return this.IsNull(this.table检校任务2.出厂编号Column);
            }
            
            public void Set出厂编号Null() {
                this[this.table检校任务2.出厂编号Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 检校任务2RowChangeEvent : EventArgs {
            
            private 检校任务2Row eventRow;
            
            private DataRowAction eventAction;
            
            public 检校任务2RowChangeEvent(检校任务2Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 检校任务2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 模板DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn column模板名称;
            
            internal 模板DataTable() : 
                    base("模板") {
                this.InitClass();
            }
            
            internal 模板DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn 模板名称Column {
                get {
                    return this.column模板名称;
                }
            }
            
            public 模板Row this[int index] {
                get {
                    return ((模板Row)(this.Rows[index]));
                }
            }
            
            public event 模板RowChangeEventHandler 模板RowChanged;
            
            public event 模板RowChangeEventHandler 模板RowChanging;
            
            public event 模板RowChangeEventHandler 模板RowDeleted;
            
            public event 模板RowChangeEventHandler 模板RowDeleting;
            
            public void Add模板Row(模板Row row) {
                this.Rows.Add(row);
            }
            
            public 模板Row Add模板Row(string 模板名称) {
                模板Row row模板Row = ((模板Row)(this.NewRow()));
                row模板Row.ItemArray = new object[] {
                        null,
                        模板名称};
                this.Rows.Add(row模板Row);
                return row模板Row;
            }
            
            public 模板Row FindByID(int ID) {
                return ((模板Row)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                模板DataTable cln = ((模板DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 模板DataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.column模板名称 = this.Columns["模板名称"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.column模板名称 = new DataColumn("模板名称", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column模板名称);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
            }
            
            public 模板Row New模板Row() {
                return ((模板Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 模板Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(模板Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.模板RowChanged != null)) {
                    this.模板RowChanged(this, new 模板RowChangeEvent(((模板Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.模板RowChanging != null)) {
                    this.模板RowChanging(this, new 模板RowChangeEvent(((模板Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.模板RowDeleted != null)) {
                    this.模板RowDeleted(this, new 模板RowChangeEvent(((模板Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.模板RowDeleting != null)) {
                    this.模板RowDeleting(this, new 模板RowChangeEvent(((模板Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove模板Row(模板Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 模板Row : DataRow {
            
            private 模板DataTable table模板;
            
            internal 模板Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table模板 = ((模板DataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.table模板.IDColumn]));
                }
                set {
                    this[this.table模板.IDColumn] = value;
                }
            }
            
            public string 模板名称 {
                get {
                    try {
                        return ((string)(this[this.table模板.模板名称Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table模板.模板名称Column] = value;
                }
            }
            
            public bool Is模板名称Null() {
                return this.IsNull(this.table模板.模板名称Column);
            }
            
            public void Set模板名称Null() {
                this[this.table模板.模板名称Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 模板RowChangeEvent : EventArgs {
            
            private 模板Row eventRow;
            
            private DataRowAction eventAction;
            
            public 模板RowChangeEvent(模板Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 模板Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
