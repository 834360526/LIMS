//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2300
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace LIMS.SystemManagement {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class SM : DataSet {
        
        private 权限模块DataTable table权限模块;
        
        private 权限类别DataTable table权限类别;
        
        private 菜单DataTable table菜单;
        
        private 角色DataTable table角色;
        
        private 用户信息DataTable table用户信息;
        
        private 用户角色DataTable table用户角色;
        
        private RoleDataTable tableRole;
        
        private DataRelation relation用户信息用户角色;
        
        public SM() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected SM(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["权限模块"] != null)) {
                    this.Tables.Add(new 权限模块DataTable(ds.Tables["权限模块"]));
                }
                if ((ds.Tables["权限类别"] != null)) {
                    this.Tables.Add(new 权限类别DataTable(ds.Tables["权限类别"]));
                }
                if ((ds.Tables["菜单"] != null)) {
                    this.Tables.Add(new 菜单DataTable(ds.Tables["菜单"]));
                }
                if ((ds.Tables["角色"] != null)) {
                    this.Tables.Add(new 角色DataTable(ds.Tables["角色"]));
                }
                if ((ds.Tables["用户信息"] != null)) {
                    this.Tables.Add(new 用户信息DataTable(ds.Tables["用户信息"]));
                }
                if ((ds.Tables["用户角色"] != null)) {
                    this.Tables.Add(new 用户角色DataTable(ds.Tables["用户角色"]));
                }
                if ((ds.Tables["Role"] != null)) {
                    this.Tables.Add(new RoleDataTable(ds.Tables["Role"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 权限模块DataTable 权限模块 {
            get {
                return this.table权限模块;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 权限类别DataTable 权限类别 {
            get {
                return this.table权限类别;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 菜单DataTable 菜单 {
            get {
                return this.table菜单;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 角色DataTable 角色 {
            get {
                return this.table角色;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 用户信息DataTable 用户信息 {
            get {
                return this.table用户信息;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 用户角色DataTable 用户角色 {
            get {
                return this.table用户角色;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RoleDataTable Role {
            get {
                return this.tableRole;
            }
        }
        
        public override DataSet Clone() {
            SM cln = ((SM)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["权限模块"] != null)) {
                this.Tables.Add(new 权限模块DataTable(ds.Tables["权限模块"]));
            }
            if ((ds.Tables["权限类别"] != null)) {
                this.Tables.Add(new 权限类别DataTable(ds.Tables["权限类别"]));
            }
            if ((ds.Tables["菜单"] != null)) {
                this.Tables.Add(new 菜单DataTable(ds.Tables["菜单"]));
            }
            if ((ds.Tables["角色"] != null)) {
                this.Tables.Add(new 角色DataTable(ds.Tables["角色"]));
            }
            if ((ds.Tables["用户信息"] != null)) {
                this.Tables.Add(new 用户信息DataTable(ds.Tables["用户信息"]));
            }
            if ((ds.Tables["用户角色"] != null)) {
                this.Tables.Add(new 用户角色DataTable(ds.Tables["用户角色"]));
            }
            if ((ds.Tables["Role"] != null)) {
                this.Tables.Add(new RoleDataTable(ds.Tables["Role"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.table权限模块 = ((权限模块DataTable)(this.Tables["权限模块"]));
            if ((this.table权限模块 != null)) {
                this.table权限模块.InitVars();
            }
            this.table权限类别 = ((权限类别DataTable)(this.Tables["权限类别"]));
            if ((this.table权限类别 != null)) {
                this.table权限类别.InitVars();
            }
            this.table菜单 = ((菜单DataTable)(this.Tables["菜单"]));
            if ((this.table菜单 != null)) {
                this.table菜单.InitVars();
            }
            this.table角色 = ((角色DataTable)(this.Tables["角色"]));
            if ((this.table角色 != null)) {
                this.table角色.InitVars();
            }
            this.table用户信息 = ((用户信息DataTable)(this.Tables["用户信息"]));
            if ((this.table用户信息 != null)) {
                this.table用户信息.InitVars();
            }
            this.table用户角色 = ((用户角色DataTable)(this.Tables["用户角色"]));
            if ((this.table用户角色 != null)) {
                this.table用户角色.InitVars();
            }
            this.tableRole = ((RoleDataTable)(this.Tables["Role"]));
            if ((this.tableRole != null)) {
                this.tableRole.InitVars();
            }
            this.relation用户信息用户角色 = this.Relations["用户信息用户角色"];
        }
        
        private void InitClass() {
            this.DataSetName = "SM";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/SM.xsd";
            this.Locale = new System.Globalization.CultureInfo("zh-CN");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.table权限模块 = new 权限模块DataTable();
            this.Tables.Add(this.table权限模块);
            this.table权限类别 = new 权限类别DataTable();
            this.Tables.Add(this.table权限类别);
            this.table菜单 = new 菜单DataTable();
            this.Tables.Add(this.table菜单);
            this.table角色 = new 角色DataTable();
            this.Tables.Add(this.table角色);
            this.table用户信息 = new 用户信息DataTable();
            this.Tables.Add(this.table用户信息);
            this.table用户角色 = new 用户角色DataTable();
            this.Tables.Add(this.table用户角色);
            this.tableRole = new RoleDataTable();
            this.Tables.Add(this.tableRole);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("用户信息用户角色", new DataColumn[] {
                        this.table用户信息.IDColumn}, new DataColumn[] {
                        this.table用户角色.用户IDColumn});
            this.table用户角色.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relation用户信息用户角色 = new DataRelation("用户信息用户角色", new DataColumn[] {
                        this.table用户信息.IDColumn}, new DataColumn[] {
                        this.table用户角色.用户IDColumn}, false);
            this.Relations.Add(this.relation用户信息用户角色);
        }
        
        private bool ShouldSerialize权限模块() {
            return false;
        }
        
        private bool ShouldSerialize权限类别() {
            return false;
        }
        
        private bool ShouldSerialize菜单() {
            return false;
        }
        
        private bool ShouldSerialize角色() {
            return false;
        }
        
        private bool ShouldSerialize用户信息() {
            return false;
        }
        
        private bool ShouldSerialize用户角色() {
            return false;
        }
        
        private bool ShouldSerializeRole() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void 权限模块RowChangeEventHandler(object sender, 权限模块RowChangeEvent e);
        
        public delegate void 权限类别RowChangeEventHandler(object sender, 权限类别RowChangeEvent e);
        
        public delegate void 菜单RowChangeEventHandler(object sender, 菜单RowChangeEvent e);
        
        public delegate void 角色RowChangeEventHandler(object sender, 角色RowChangeEvent e);
        
        public delegate void 用户信息RowChangeEventHandler(object sender, 用户信息RowChangeEvent e);
        
        public delegate void 用户角色RowChangeEventHandler(object sender, 用户角色RowChangeEvent e);
        
        public delegate void RoleRowChangeEventHandler(object sender, RoleRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 权限模块DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn column权限模块名;
            
            private DataColumn column类别;
            
            private DataColumn column菜单级别;
            
            private DataColumn column菜单项目ID;
            
            private DataColumn column链接地址;
            
            private DataColumn column备注;
            
            internal 权限模块DataTable() : 
                    base("权限模块") {
                this.InitClass();
            }
            
            internal 权限模块DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn 权限模块名Column {
                get {
                    return this.column权限模块名;
                }
            }
            
            internal DataColumn 类别Column {
                get {
                    return this.column类别;
                }
            }
            
            internal DataColumn 菜单级别Column {
                get {
                    return this.column菜单级别;
                }
            }
            
            internal DataColumn 菜单项目IDColumn {
                get {
                    return this.column菜单项目ID;
                }
            }
            
            internal DataColumn 链接地址Column {
                get {
                    return this.column链接地址;
                }
            }
            
            internal DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            public 权限模块Row this[int index] {
                get {
                    return ((权限模块Row)(this.Rows[index]));
                }
            }
            
            public event 权限模块RowChangeEventHandler 权限模块RowChanged;
            
            public event 权限模块RowChangeEventHandler 权限模块RowChanging;
            
            public event 权限模块RowChangeEventHandler 权限模块RowDeleted;
            
            public event 权限模块RowChangeEventHandler 权限模块RowDeleting;
            
            public void Add权限模块Row(权限模块Row row) {
                this.Rows.Add(row);
            }
            
            public 权限模块Row Add权限模块Row(string 权限模块名, int 类别, int 菜单级别, int 菜单项目ID, string 链接地址, string 备注) {
                权限模块Row row权限模块Row = ((权限模块Row)(this.NewRow()));
                row权限模块Row.ItemArray = new object[] {
                        null,
                        权限模块名,
                        类别,
                        菜单级别,
                        菜单项目ID,
                        链接地址,
                        备注};
                this.Rows.Add(row权限模块Row);
                return row权限模块Row;
            }
            
            public 权限模块Row FindByID(int ID) {
                return ((权限模块Row)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                权限模块DataTable cln = ((权限模块DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 权限模块DataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.column权限模块名 = this.Columns["权限模块名"];
                this.column类别 = this.Columns["类别"];
                this.column菜单级别 = this.Columns["菜单级别"];
                this.column菜单项目ID = this.Columns["菜单项目ID"];
                this.column链接地址 = this.Columns["链接地址"];
                this.column备注 = this.Columns["备注"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.column权限模块名 = new DataColumn("权限模块名", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column权限模块名);
                this.column类别 = new DataColumn("类别", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column类别);
                this.column菜单级别 = new DataColumn("菜单级别", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column菜单级别);
                this.column菜单项目ID = new DataColumn("菜单项目ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column菜单项目ID);
                this.column链接地址 = new DataColumn("链接地址", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column链接地址);
                this.column备注 = new DataColumn("备注", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column备注);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.column类别.DefaultValue = 2;
            }
            
            public 权限模块Row New权限模块Row() {
                return ((权限模块Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 权限模块Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(权限模块Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.权限模块RowChanged != null)) {
                    this.权限模块RowChanged(this, new 权限模块RowChangeEvent(((权限模块Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.权限模块RowChanging != null)) {
                    this.权限模块RowChanging(this, new 权限模块RowChangeEvent(((权限模块Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.权限模块RowDeleted != null)) {
                    this.权限模块RowDeleted(this, new 权限模块RowChangeEvent(((权限模块Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.权限模块RowDeleting != null)) {
                    this.权限模块RowDeleting(this, new 权限模块RowChangeEvent(((权限模块Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove权限模块Row(权限模块Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 权限模块Row : DataRow {
            
            private 权限模块DataTable table权限模块;
            
            internal 权限模块Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table权限模块 = ((权限模块DataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.table权限模块.IDColumn]));
                }
                set {
                    this[this.table权限模块.IDColumn] = value;
                }
            }
            
            public string 权限模块名 {
                get {
                    try {
                        return ((string)(this[this.table权限模块.权限模块名Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table权限模块.权限模块名Column] = value;
                }
            }
            
            public int 类别 {
                get {
                    try {
                        return ((int)(this[this.table权限模块.类别Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table权限模块.类别Column] = value;
                }
            }
            
            public int 菜单级别 {
                get {
                    try {
                        return ((int)(this[this.table权限模块.菜单级别Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table权限模块.菜单级别Column] = value;
                }
            }
            
            public int 菜单项目ID {
                get {
                    try {
                        return ((int)(this[this.table权限模块.菜单项目IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table权限模块.菜单项目IDColumn] = value;
                }
            }
            
            public string 链接地址 {
                get {
                    try {
                        return ((string)(this[this.table权限模块.链接地址Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table权限模块.链接地址Column] = value;
                }
            }
            
            public string 备注 {
                get {
                    try {
                        return ((string)(this[this.table权限模块.备注Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table权限模块.备注Column] = value;
                }
            }
            
            public bool Is权限模块名Null() {
                return this.IsNull(this.table权限模块.权限模块名Column);
            }
            
            public void Set权限模块名Null() {
                this[this.table权限模块.权限模块名Column] = System.Convert.DBNull;
            }
            
            public bool Is类别Null() {
                return this.IsNull(this.table权限模块.类别Column);
            }
            
            public void Set类别Null() {
                this[this.table权限模块.类别Column] = System.Convert.DBNull;
            }
            
            public bool Is菜单级别Null() {
                return this.IsNull(this.table权限模块.菜单级别Column);
            }
            
            public void Set菜单级别Null() {
                this[this.table权限模块.菜单级别Column] = System.Convert.DBNull;
            }
            
            public bool Is菜单项目IDNull() {
                return this.IsNull(this.table权限模块.菜单项目IDColumn);
            }
            
            public void Set菜单项目IDNull() {
                this[this.table权限模块.菜单项目IDColumn] = System.Convert.DBNull;
            }
            
            public bool Is链接地址Null() {
                return this.IsNull(this.table权限模块.链接地址Column);
            }
            
            public void Set链接地址Null() {
                this[this.table权限模块.链接地址Column] = System.Convert.DBNull;
            }
            
            public bool Is备注Null() {
                return this.IsNull(this.table权限模块.备注Column);
            }
            
            public void Set备注Null() {
                this[this.table权限模块.备注Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 权限模块RowChangeEvent : EventArgs {
            
            private 权限模块Row eventRow;
            
            private DataRowAction eventAction;
            
            public 权限模块RowChangeEvent(权限模块Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 权限模块Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 权限类别DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnType;
            
            internal 权限类别DataTable() : 
                    base("权限类别") {
                this.InitClass();
            }
            
            internal 权限类别DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            public 权限类别Row this[int index] {
                get {
                    return ((权限类别Row)(this.Rows[index]));
                }
            }
            
            public event 权限类别RowChangeEventHandler 权限类别RowChanged;
            
            public event 权限类别RowChangeEventHandler 权限类别RowChanging;
            
            public event 权限类别RowChangeEventHandler 权限类别RowDeleted;
            
            public event 权限类别RowChangeEventHandler 权限类别RowDeleting;
            
            public void Add权限类别Row(权限类别Row row) {
                this.Rows.Add(row);
            }
            
            public 权限类别Row Add权限类别Row(string Type) {
                权限类别Row row权限类别Row = ((权限类别Row)(this.NewRow()));
                row权限类别Row.ItemArray = new object[] {
                        null,
                        Type};
                this.Rows.Add(row权限类别Row);
                return row权限类别Row;
            }
            
            public 权限类别Row FindByID(int ID) {
                return ((权限类别Row)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                权限类别DataTable cln = ((权限类别DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 权限类别DataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnType = this.Columns["Type"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnType = new DataColumn("Type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnType);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
            }
            
            public 权限类别Row New权限类别Row() {
                return ((权限类别Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 权限类别Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(权限类别Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.权限类别RowChanged != null)) {
                    this.权限类别RowChanged(this, new 权限类别RowChangeEvent(((权限类别Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.权限类别RowChanging != null)) {
                    this.权限类别RowChanging(this, new 权限类别RowChangeEvent(((权限类别Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.权限类别RowDeleted != null)) {
                    this.权限类别RowDeleted(this, new 权限类别RowChangeEvent(((权限类别Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.权限类别RowDeleting != null)) {
                    this.权限类别RowDeleting(this, new 权限类别RowChangeEvent(((权限类别Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove权限类别Row(权限类别Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 权限类别Row : DataRow {
            
            private 权限类别DataTable table权限类别;
            
            internal 权限类别Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table权限类别 = ((权限类别DataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.table权限类别.IDColumn]));
                }
                set {
                    this[this.table权限类别.IDColumn] = value;
                }
            }
            
            public string Type {
                get {
                    try {
                        return ((string)(this[this.table权限类别.TypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table权限类别.TypeColumn] = value;
                }
            }
            
            public bool IsTypeNull() {
                return this.IsNull(this.table权限类别.TypeColumn);
            }
            
            public void SetTypeNull() {
                this[this.table权限类别.TypeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 权限类别RowChangeEvent : EventArgs {
            
            private 权限类别Row eventRow;
            
            private DataRowAction eventAction;
            
            public 权限类别RowChangeEvent(权限类别Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 权限类别Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 菜单DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnitem;
            
            internal 菜单DataTable() : 
                    base("菜单") {
                this.InitClass();
            }
            
            internal 菜单DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn itemColumn {
                get {
                    return this.columnitem;
                }
            }
            
            public 菜单Row this[int index] {
                get {
                    return ((菜单Row)(this.Rows[index]));
                }
            }
            
            public event 菜单RowChangeEventHandler 菜单RowChanged;
            
            public event 菜单RowChangeEventHandler 菜单RowChanging;
            
            public event 菜单RowChangeEventHandler 菜单RowDeleted;
            
            public event 菜单RowChangeEventHandler 菜单RowDeleting;
            
            public void Add菜单Row(菜单Row row) {
                this.Rows.Add(row);
            }
            
            public 菜单Row Add菜单Row(string item) {
                菜单Row row菜单Row = ((菜单Row)(this.NewRow()));
                row菜单Row.ItemArray = new object[] {
                        null,
                        item};
                this.Rows.Add(row菜单Row);
                return row菜单Row;
            }
            
            public 菜单Row FindByID(int ID) {
                return ((菜单Row)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                菜单DataTable cln = ((菜单DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 菜单DataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnitem = this.Columns["item"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnitem = new DataColumn("item", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnitem);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
            }
            
            public 菜单Row New菜单Row() {
                return ((菜单Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 菜单Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(菜单Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.菜单RowChanged != null)) {
                    this.菜单RowChanged(this, new 菜单RowChangeEvent(((菜单Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.菜单RowChanging != null)) {
                    this.菜单RowChanging(this, new 菜单RowChangeEvent(((菜单Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.菜单RowDeleted != null)) {
                    this.菜单RowDeleted(this, new 菜单RowChangeEvent(((菜单Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.菜单RowDeleting != null)) {
                    this.菜单RowDeleting(this, new 菜单RowChangeEvent(((菜单Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove菜单Row(菜单Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 菜单Row : DataRow {
            
            private 菜单DataTable table菜单;
            
            internal 菜单Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table菜单 = ((菜单DataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.table菜单.IDColumn]));
                }
                set {
                    this[this.table菜单.IDColumn] = value;
                }
            }
            
            public string item {
                get {
                    try {
                        return ((string)(this[this.table菜单.itemColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table菜单.itemColumn] = value;
                }
            }
            
            public bool IsitemNull() {
                return this.IsNull(this.table菜单.itemColumn);
            }
            
            public void SetitemNull() {
                this[this.table菜单.itemColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 菜单RowChangeEvent : EventArgs {
            
            private 菜单Row eventRow;
            
            private DataRowAction eventAction;
            
            public 菜单RowChangeEvent(菜单Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 菜单Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 角色DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn column角色名称;
            
            private DataColumn column角色描述;
            
            internal 角色DataTable() : 
                    base("角色") {
                this.InitClass();
            }
            
            internal 角色DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn 角色名称Column {
                get {
                    return this.column角色名称;
                }
            }
            
            internal DataColumn 角色描述Column {
                get {
                    return this.column角色描述;
                }
            }
            
            public 角色Row this[int index] {
                get {
                    return ((角色Row)(this.Rows[index]));
                }
            }
            
            public event 角色RowChangeEventHandler 角色RowChanged;
            
            public event 角色RowChangeEventHandler 角色RowChanging;
            
            public event 角色RowChangeEventHandler 角色RowDeleted;
            
            public event 角色RowChangeEventHandler 角色RowDeleting;
            
            public void Add角色Row(角色Row row) {
                this.Rows.Add(row);
            }
            
            public 角色Row Add角色Row(string 角色名称, string 角色描述) {
                角色Row row角色Row = ((角色Row)(this.NewRow()));
                row角色Row.ItemArray = new object[] {
                        null,
                        角色名称,
                        角色描述};
                this.Rows.Add(row角色Row);
                return row角色Row;
            }
            
            public 角色Row FindByID(int ID) {
                return ((角色Row)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                角色DataTable cln = ((角色DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 角色DataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.column角色名称 = this.Columns["角色名称"];
                this.column角色描述 = this.Columns["角色描述"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.column角色名称 = new DataColumn("角色名称", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column角色名称);
                this.column角色描述 = new DataColumn("角色描述", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column角色描述);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
            }
            
            public 角色Row New角色Row() {
                return ((角色Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 角色Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(角色Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.角色RowChanged != null)) {
                    this.角色RowChanged(this, new 角色RowChangeEvent(((角色Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.角色RowChanging != null)) {
                    this.角色RowChanging(this, new 角色RowChangeEvent(((角色Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.角色RowDeleted != null)) {
                    this.角色RowDeleted(this, new 角色RowChangeEvent(((角色Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.角色RowDeleting != null)) {
                    this.角色RowDeleting(this, new 角色RowChangeEvent(((角色Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove角色Row(角色Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 角色Row : DataRow {
            
            private 角色DataTable table角色;
            
            internal 角色Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table角色 = ((角色DataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.table角色.IDColumn]));
                }
                set {
                    this[this.table角色.IDColumn] = value;
                }
            }
            
            public string 角色名称 {
                get {
                    try {
                        return ((string)(this[this.table角色.角色名称Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table角色.角色名称Column] = value;
                }
            }
            
            public string 角色描述 {
                get {
                    try {
                        return ((string)(this[this.table角色.角色描述Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table角色.角色描述Column] = value;
                }
            }
            
            public bool Is角色名称Null() {
                return this.IsNull(this.table角色.角色名称Column);
            }
            
            public void Set角色名称Null() {
                this[this.table角色.角色名称Column] = System.Convert.DBNull;
            }
            
            public bool Is角色描述Null() {
                return this.IsNull(this.table角色.角色描述Column);
            }
            
            public void Set角色描述Null() {
                this[this.table角色.角色描述Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 角色RowChangeEvent : EventArgs {
            
            private 角色Row eventRow;
            
            private DataRowAction eventAction;
            
            public 角色RowChangeEvent(角色Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 角色Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 用户信息DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn column用户名;
            
            private DataColumn column姓名;
            
            private DataColumn column性别;
            
            private DataColumn column科室;
            
            private DataColumn columnID;
            
            internal 用户信息DataTable() : 
                    base("用户信息") {
                this.InitClass();
            }
            
            internal 用户信息DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn 用户名Column {
                get {
                    return this.column用户名;
                }
            }
            
            internal DataColumn 姓名Column {
                get {
                    return this.column姓名;
                }
            }
            
            internal DataColumn 性别Column {
                get {
                    return this.column性别;
                }
            }
            
            internal DataColumn 科室Column {
                get {
                    return this.column科室;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            public 用户信息Row this[int index] {
                get {
                    return ((用户信息Row)(this.Rows[index]));
                }
            }
            
            public event 用户信息RowChangeEventHandler 用户信息RowChanged;
            
            public event 用户信息RowChangeEventHandler 用户信息RowChanging;
            
            public event 用户信息RowChangeEventHandler 用户信息RowDeleted;
            
            public event 用户信息RowChangeEventHandler 用户信息RowDeleting;
            
            public void Add用户信息Row(用户信息Row row) {
                this.Rows.Add(row);
            }
            
            public 用户信息Row Add用户信息Row(string 用户名, string 姓名, string 性别, string 科室) {
                用户信息Row row用户信息Row = ((用户信息Row)(this.NewRow()));
                row用户信息Row.ItemArray = new object[] {
                        用户名,
                        姓名,
                        性别,
                        科室,
                        null};
                this.Rows.Add(row用户信息Row);
                return row用户信息Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                用户信息DataTable cln = ((用户信息DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 用户信息DataTable();
            }
            
            internal void InitVars() {
                this.column用户名 = this.Columns["用户名"];
                this.column姓名 = this.Columns["姓名"];
                this.column性别 = this.Columns["性别"];
                this.column科室 = this.Columns["科室"];
                this.columnID = this.Columns["ID"];
            }
            
            private void InitClass() {
                this.column用户名 = new DataColumn("用户名", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column用户名);
                this.column姓名 = new DataColumn("姓名", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column姓名);
                this.column性别 = new DataColumn("性别", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column性别);
                this.column科室 = new DataColumn("科室", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column科室);
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.Constraints.Add(new UniqueConstraint("key1", new DataColumn[] {
                                this.columnID}, false));
                this.column用户名.AllowDBNull = false;
                this.column姓名.AllowDBNull = false;
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
            }
            
            public 用户信息Row New用户信息Row() {
                return ((用户信息Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 用户信息Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(用户信息Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.用户信息RowChanged != null)) {
                    this.用户信息RowChanged(this, new 用户信息RowChangeEvent(((用户信息Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.用户信息RowChanging != null)) {
                    this.用户信息RowChanging(this, new 用户信息RowChangeEvent(((用户信息Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.用户信息RowDeleted != null)) {
                    this.用户信息RowDeleted(this, new 用户信息RowChangeEvent(((用户信息Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.用户信息RowDeleting != null)) {
                    this.用户信息RowDeleting(this, new 用户信息RowChangeEvent(((用户信息Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove用户信息Row(用户信息Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 用户信息Row : DataRow {
            
            private 用户信息DataTable table用户信息;
            
            internal 用户信息Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table用户信息 = ((用户信息DataTable)(this.Table));
            }
            
            public string 用户名 {
                get {
                    return ((string)(this[this.table用户信息.用户名Column]));
                }
                set {
                    this[this.table用户信息.用户名Column] = value;
                }
            }
            
            public string 姓名 {
                get {
                    return ((string)(this[this.table用户信息.姓名Column]));
                }
                set {
                    this[this.table用户信息.姓名Column] = value;
                }
            }
            
            public string 性别 {
                get {
                    try {
                        return ((string)(this[this.table用户信息.性别Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table用户信息.性别Column] = value;
                }
            }
            
            public string 科室 {
                get {
                    try {
                        return ((string)(this[this.table用户信息.科室Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table用户信息.科室Column] = value;
                }
            }
            
            public int ID {
                get {
                    return ((int)(this[this.table用户信息.IDColumn]));
                }
                set {
                    this[this.table用户信息.IDColumn] = value;
                }
            }
            
            public bool Is性别Null() {
                return this.IsNull(this.table用户信息.性别Column);
            }
            
            public void Set性别Null() {
                this[this.table用户信息.性别Column] = System.Convert.DBNull;
            }
            
            public bool Is科室Null() {
                return this.IsNull(this.table用户信息.科室Column);
            }
            
            public void Set科室Null() {
                this[this.table用户信息.科室Column] = System.Convert.DBNull;
            }
            
            public 用户角色Row[] Get用户角色Rows() {
                return ((用户角色Row[])(this.GetChildRows(this.Table.ChildRelations["用户信息用户角色"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 用户信息RowChangeEvent : EventArgs {
            
            private 用户信息Row eventRow;
            
            private DataRowAction eventAction;
            
            public 用户信息RowChangeEvent(用户信息Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 用户信息Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 用户角色DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn column用户ID;
            
            private DataColumn column用户角色;
            
            internal 用户角色DataTable() : 
                    base("用户角色") {
                this.InitClass();
            }
            
            internal 用户角色DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn 用户IDColumn {
                get {
                    return this.column用户ID;
                }
            }
            
            internal DataColumn 用户角色Column {
                get {
                    return this.column用户角色;
                }
            }
            
            public 用户角色Row this[int index] {
                get {
                    return ((用户角色Row)(this.Rows[index]));
                }
            }
            
            public event 用户角色RowChangeEventHandler 用户角色RowChanged;
            
            public event 用户角色RowChangeEventHandler 用户角色RowChanging;
            
            public event 用户角色RowChangeEventHandler 用户角色RowDeleted;
            
            public event 用户角色RowChangeEventHandler 用户角色RowDeleting;
            
            public void Add用户角色Row(用户角色Row row) {
                this.Rows.Add(row);
            }
            
            public 用户角色Row Add用户角色Row(用户信息Row parent用户信息RowBy用户信息用户角色, int 用户角色) {
                用户角色Row row用户角色Row = ((用户角色Row)(this.NewRow()));
                row用户角色Row.ItemArray = new object[] {
                        null,
                        parent用户信息RowBy用户信息用户角色[4],
                        用户角色};
                this.Rows.Add(row用户角色Row);
                return row用户角色Row;
            }
            
            public 用户角色Row FindByID(int ID) {
                return ((用户角色Row)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                用户角色DataTable cln = ((用户角色DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 用户角色DataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.column用户ID = this.Columns["用户ID"];
                this.column用户角色 = this.Columns["用户角色"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.column用户ID = new DataColumn("用户ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column用户ID);
                this.column用户角色 = new DataColumn("用户角色", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column用户角色);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            public 用户角色Row New用户角色Row() {
                return ((用户角色Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 用户角色Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(用户角色Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.用户角色RowChanged != null)) {
                    this.用户角色RowChanged(this, new 用户角色RowChangeEvent(((用户角色Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.用户角色RowChanging != null)) {
                    this.用户角色RowChanging(this, new 用户角色RowChangeEvent(((用户角色Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.用户角色RowDeleted != null)) {
                    this.用户角色RowDeleted(this, new 用户角色RowChangeEvent(((用户角色Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.用户角色RowDeleting != null)) {
                    this.用户角色RowDeleting(this, new 用户角色RowChangeEvent(((用户角色Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove用户角色Row(用户角色Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 用户角色Row : DataRow {
            
            private 用户角色DataTable table用户角色;
            
            internal 用户角色Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table用户角色 = ((用户角色DataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.table用户角色.IDColumn]));
                }
                set {
                    this[this.table用户角色.IDColumn] = value;
                }
            }
            
            public int 用户ID {
                get {
                    try {
                        return ((int)(this[this.table用户角色.用户IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table用户角色.用户IDColumn] = value;
                }
            }
            
            public int 用户角色 {
                get {
                    try {
                        return ((int)(this[this.table用户角色.用户角色Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table用户角色.用户角色Column] = value;
                }
            }
            
            public 用户信息Row 用户信息Row {
                get {
                    return ((用户信息Row)(this.GetParentRow(this.Table.ParentRelations["用户信息用户角色"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["用户信息用户角色"]);
                }
            }
            
            public bool Is用户IDNull() {
                return this.IsNull(this.table用户角色.用户IDColumn);
            }
            
            public void Set用户IDNull() {
                this[this.table用户角色.用户IDColumn] = System.Convert.DBNull;
            }
            
            public bool Is用户角色Null() {
                return this.IsNull(this.table用户角色.用户角色Column);
            }
            
            public void Set用户角色Null() {
                this[this.table用户角色.用户角色Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 用户角色RowChangeEvent : EventArgs {
            
            private 用户角色Row eventRow;
            
            private DataRowAction eventAction;
            
            public 用户角色RowChangeEvent(用户角色Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 用户角色Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RoleDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnrole;
            
            private DataColumn columndescription;
            
            internal RoleDataTable() : 
                    base("Role") {
                this.InitClass();
            }
            
            internal RoleDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn roleColumn {
                get {
                    return this.columnrole;
                }
            }
            
            internal DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            public RoleRow this[int index] {
                get {
                    return ((RoleRow)(this.Rows[index]));
                }
            }
            
            public event RoleRowChangeEventHandler RoleRowChanged;
            
            public event RoleRowChangeEventHandler RoleRowChanging;
            
            public event RoleRowChangeEventHandler RoleRowDeleted;
            
            public event RoleRowChangeEventHandler RoleRowDeleting;
            
            public void AddRoleRow(RoleRow row) {
                this.Rows.Add(row);
            }
            
            public RoleRow AddRoleRow(string role, string description) {
                RoleRow rowRoleRow = ((RoleRow)(this.NewRow()));
                rowRoleRow.ItemArray = new object[] {
                        null,
                        role,
                        description};
                this.Rows.Add(rowRoleRow);
                return rowRoleRow;
            }
            
            public RoleRow FindByID(int ID) {
                return ((RoleRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RoleDataTable cln = ((RoleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RoleDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnrole = this.Columns["role"];
                this.columndescription = this.Columns["description"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnrole = new DataColumn("role", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrole);
                this.columndescription = new DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescription);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
            }
            
            public RoleRow NewRoleRow() {
                return ((RoleRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RoleRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RoleRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RoleRowChanged != null)) {
                    this.RoleRowChanged(this, new RoleRowChangeEvent(((RoleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RoleRowChanging != null)) {
                    this.RoleRowChanging(this, new RoleRowChangeEvent(((RoleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RoleRowDeleted != null)) {
                    this.RoleRowDeleted(this, new RoleRowChangeEvent(((RoleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RoleRowDeleting != null)) {
                    this.RoleRowDeleting(this, new RoleRowChangeEvent(((RoleRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRoleRow(RoleRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RoleRow : DataRow {
            
            private RoleDataTable tableRole;
            
            internal RoleRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRole = ((RoleDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tableRole.IDColumn]));
                }
                set {
                    this[this.tableRole.IDColumn] = value;
                }
            }
            
            public string role {
                get {
                    try {
                        return ((string)(this[this.tableRole.roleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRole.roleColumn] = value;
                }
            }
            
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableRole.descriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRole.descriptionColumn] = value;
                }
            }
            
            public bool IsroleNull() {
                return this.IsNull(this.tableRole.roleColumn);
            }
            
            public void SetroleNull() {
                this[this.tableRole.roleColumn] = System.Convert.DBNull;
            }
            
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableRole.descriptionColumn);
            }
            
            public void SetdescriptionNull() {
                this[this.tableRole.descriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RoleRowChangeEvent : EventArgs {
            
            private RoleRow eventRow;
            
            private DataRowAction eventAction;
            
            public RoleRowChangeEvent(RoleRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RoleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
