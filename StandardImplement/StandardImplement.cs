//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2300
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace LIMS.StandardImplement {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class StandardImplement : DataSet {
        
        private 标准器类型DataTable table标准器类型;
        
        public StandardImplement() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected StandardImplement(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["标准器类型"] != null)) {
                    this.Tables.Add(new 标准器类型DataTable(ds.Tables["标准器类型"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 标准器类型DataTable 标准器类型 {
            get {
                return this.table标准器类型;
            }
        }
        
        public override DataSet Clone() {
            StandardImplement cln = ((StandardImplement)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["标准器类型"] != null)) {
                this.Tables.Add(new 标准器类型DataTable(ds.Tables["标准器类型"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.table标准器类型 = ((标准器类型DataTable)(this.Tables["标准器类型"]));
            if ((this.table标准器类型 != null)) {
                this.table标准器类型.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "StandardImplement";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/StandardImplement.xsd";
            this.Locale = new System.Globalization.CultureInfo("zh-CN");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.table标准器类型 = new 标准器类型DataTable();
            this.Tables.Add(this.table标准器类型);
        }
        
        private bool ShouldSerialize标准器类型() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void 标准器类型RowChangeEventHandler(object sender, 标准器类型RowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 标准器类型DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnType;
            
            private DataColumn columnID;
            
            internal 标准器类型DataTable() : 
                    base("标准器类型") {
                this.InitClass();
            }
            
            internal 标准器类型DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            public 标准器类型Row this[int index] {
                get {
                    return ((标准器类型Row)(this.Rows[index]));
                }
            }
            
            public event 标准器类型RowChangeEventHandler 标准器类型RowChanged;
            
            public event 标准器类型RowChangeEventHandler 标准器类型RowChanging;
            
            public event 标准器类型RowChangeEventHandler 标准器类型RowDeleted;
            
            public event 标准器类型RowChangeEventHandler 标准器类型RowDeleting;
            
            public void Add标准器类型Row(标准器类型Row row) {
                this.Rows.Add(row);
            }
            
            public 标准器类型Row Add标准器类型Row(string Type) {
                标准器类型Row row标准器类型Row = ((标准器类型Row)(this.NewRow()));
                row标准器类型Row.ItemArray = new object[] {
                        Type,
                        null};
                this.Rows.Add(row标准器类型Row);
                return row标准器类型Row;
            }
            
            public 标准器类型Row FindByID(int ID) {
                return ((标准器类型Row)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                标准器类型DataTable cln = ((标准器类型DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 标准器类型DataTable();
            }
            
            internal void InitVars() {
                this.columnType = this.Columns["Type"];
                this.columnID = this.Columns["ID"];
            }
            
            private void InitClass() {
                this.columnType = new DataColumn("Type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnType);
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
            }
            
            public 标准器类型Row New标准器类型Row() {
                return ((标准器类型Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 标准器类型Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(标准器类型Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.标准器类型RowChanged != null)) {
                    this.标准器类型RowChanged(this, new 标准器类型RowChangeEvent(((标准器类型Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.标准器类型RowChanging != null)) {
                    this.标准器类型RowChanging(this, new 标准器类型RowChangeEvent(((标准器类型Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.标准器类型RowDeleted != null)) {
                    this.标准器类型RowDeleted(this, new 标准器类型RowChangeEvent(((标准器类型Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.标准器类型RowDeleting != null)) {
                    this.标准器类型RowDeleting(this, new 标准器类型RowChangeEvent(((标准器类型Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove标准器类型Row(标准器类型Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 标准器类型Row : DataRow {
            
            private 标准器类型DataTable table标准器类型;
            
            internal 标准器类型Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table标准器类型 = ((标准器类型DataTable)(this.Table));
            }
            
            public string Type {
                get {
                    try {
                        return ((string)(this[this.table标准器类型.TypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table标准器类型.TypeColumn] = value;
                }
            }
            
            public int ID {
                get {
                    return ((int)(this[this.table标准器类型.IDColumn]));
                }
                set {
                    this[this.table标准器类型.IDColumn] = value;
                }
            }
            
            public bool IsTypeNull() {
                return this.IsNull(this.table标准器类型.TypeColumn);
            }
            
            public void SetTypeNull() {
                this[this.table标准器类型.TypeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 标准器类型RowChangeEvent : EventArgs {
            
            private 标准器类型Row eventRow;
            
            private DataRowAction eventAction;
            
            public 标准器类型RowChangeEvent(标准器类型Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 标准器类型Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
